!function(){"use strict";class e{constructor(e,t,s,r,i){this._name=e.name,this._link=e.link,this._id=e._id,this._isLiked=e.isLiked,this._cardSelector=t,this._handleCardClick=s,this._handleLikeClick=r,this._handleDeleteClick=i}_setEventListeners(){this._element.querySelector(".card__like-button").addEventListener("mousedown",(()=>this._handleLikeClick(this))),this._element.querySelector(".card__delete-button").addEventListener("mousedown",(()=>this._handleDeleteClick(this))),this._element.querySelector(".card__image").addEventListener("mousedown",(()=>this._handlePreviewPicture()))}_handleLikeButton(){this._isLiked?this._element.querySelector(".card__like-button").classList.add("card__like-button_active"):this._element.querySelector(".card__like-button").classList.remove("card__like-button_active")}isLiked(){return this._isLiked}setCardLike(e){this._isLiked=e,this._handleLikeButton()}handleDeleteCard(e){this._element.remove()}_handlePreviewPicture(){this._handleCardClick(this._link,this._name)}getView(){return this._element=document.querySelector(this._cardSelector).content.firstElementChild.cloneNode(!0),this._element.querySelector(".card__image").src=this._link,this._element.querySelector(".card__image").alt=this._name,this._element.querySelector(".card__title").textContent=this._name,this._handleLikeButton(),this._setEventListeners(),this._element}}class t{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formEl=t}_showInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_hasInvalidInput(e){return!e.every((e=>e.validity.valid))}disableBtn(){const e=this._formEl.querySelector(this._submitButtonSelector);e.classList.add(this._inactiveButtonClass),e.disabled=!0}_enableBtn(){const e=this._formEl.querySelector(this._submitButtonSelector);e.classList.remove(this._inactiveButtonClass),e.disabled=!1}_toggleButtonState(e){this._hasInvalidInput(e)?this.disableBtn():this._enableBtn()}_setEventListeners(){const e=[...this._formEl.querySelectorAll(this._inputSelector)];e.forEach((t=>{t.addEventListener("input",(s=>{this._checkInputValidity(t),this._toggleButtonState(e)}))}))}enableValidation(){this._formEl.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetErrorMessage(){const e=[...this._formEl.querySelectorAll(this._inputSelector)];e.forEach((t=>{this._hideInputError(t),this._toggleButtonState(e)}))}}class s{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popupElement.querySelector(".modal__close-button").addEventListener("mousedown",(()=>{this.close()})),this._popupElement.addEventListener("mousedown",(e=>{e.target===this._popupElement&&this.close()}))}}class r extends s{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._submitButton=this._popupElement.querySelector(".modal__save-button"),this._submitButtonText=this._submitButton.textContent}_getInputValues(){const e=this._popupForm.querySelectorAll(".form__input"),t={};return e.forEach((e=>{t[e.name]=e.value})),t}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this.close()}))}close(){this._popupForm.reset(),super.close()}submitButtonState(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButtonText}}class i{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}const n=document.querySelector("#profile-pencil-btn"),o=document.querySelector("#profile-pencil-modal"),a=document.querySelector("#profile-avatar-modal"),l=document.querySelector("#profile-title-input"),c=document.querySelector("#profile-description-input"),d=(document.querySelector(".profile__image"),document.querySelector("#profile-image-pencil-btn")),h=document.querySelector("#profile-add-btn"),u=document.querySelector("#add-card-modal"),_=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkServerResponse(e){if(e.ok)return e.json();Promise.reject(`Error: ${e.status}`)}getCurrentUser(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._checkServerResponse)}updateProfile(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.title,about:e.description})}).then(this._checkServerResponse)}updateAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.link})}).then(this._checkServerResponse)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkServerResponse)}addCard(e){let{title:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then(this._checkServerResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkServerResponse)}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkServerResponse)}dislikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkServerResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"5ed97d95-558f-499d-9d81-4e06bbe8932c","Content-Type":"application/json"}}),m=new class{constructor(e){let{title:t,description:s,avatar:r}=e;this._title=document.querySelector(t),this._description=document.querySelector(s),this._avatar=document.querySelector(r)}getUserInfo(){return{title:this._title.textContent,description:this._description.textContent}}setUserInfo(e){let{title:t,description:s}=e;this._title.textContent=t,this._description.textContent=s}setAvatar(e){let{avatar:t}=e;this._avatar.src=t}}({title:".profile__title",description:".profile__description",avatar:".profile__image"}),p=new class extends s{constructor(e){super({popupSelector:e}),this._cardImage=this._popupElement.querySelector(".modal__preview-image"),this._cardTitle=this._popupElement.querySelector(".modal__preview-image-title")}open(e){let{link:t,name:s}=e;this._cardImage.src=t,this._cardImage.alt=s,this._cardTitle.textContent=s,super.open()}}("#preview-image-modal");function v(e,t){p.open({link:e,name:t})}function E(e){e.isLiked()?_.dislikeCard(e._id).then((()=>{e.setCardLike(!1)})).catch((e=>{console.error(`Error: ${e}`)})):_.likeCard(e._id).then((()=>{e.setCardLike(!0)})).catch((e=>{console.error(`Error: ${e}`)}))}function S(e){w.open(),w.setConfirmationCallback((()=>{_.deleteCard(e._id).then((()=>{e.handleDeleteCard()})).catch((e=>{console.error(`Error: ${e}`)}))}))}function b(t){return new e(t,"#card-template",v,E,S).getView()}p.setEventListeners();const f={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".modal__save-button",inactiveButtonClass:"modal__save-button_disabled",inputErrorClass:"form__input-error",errorClass:"form__error_visible"},C=new t(f,o),k=new t(f,u),y=new t(f,a);let L;C.enableValidation(),k.enableValidation(),y.enableValidation(),Promise.all([_.getCurrentUser(),_.getInitialCards()]).then((e=>{let[t,s]=e;m.setUserInfo({title:t.name,description:t.about}),m.setAvatar({avatar:t.avatar}),L=new i({items:s.reverse(),renderer:e=>{const t=b(e);L.addItem(t)}},".cards__content"),L.renderItems()})).catch((e=>{console.error(`Error: ${e}`)}));const g=new r("#profile-pencil-modal",(e=>{g.submitButtonState(!0),_.updateProfile(e).then((e=>{m.setUserInfo({title:e.name,description:e.about})})).catch((e=>{console.error(`Error: ${e}`)})).finally((()=>g.submitButtonState(!1)))}));g.setEventListeners(),n.addEventListener("click",(()=>{const e=m.getUserInfo();l.value=e.title,c.value=e.description,C.resetErrorMessage(),C.disableBtn(),g.open()}));const B=new r("#profile-avatar-modal",(e=>{B.submitButtonState(!0),_.updateAvatar(e).then((e=>{m.setAvatar({avatar:e.avatar})})).catch((e=>{console.error(`Error: ${e}`)})).finally((()=>B.submitButtonState(!1)))}));B.setEventListeners(),d.addEventListener("click",(()=>{y.resetErrorMessage(),y.disableBtn(),B.open()}));const q=new r("#add-card-modal",(e=>{q.submitButtonState(!0),_.addCard(e).then((e=>{!function(e){const t=b(e);L.addItem(t)}(e)})).catch((e=>{console.error(`Error: ${e}`)})).finally((()=>q.submitButtonState(!1)))}));q.setEventListeners(),h.addEventListener("click",(()=>{k.resetErrorMessage(),k.disableBtn(),q.open()}));const w=new class extends s{constructor(e){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._submitButton=this._popupElement.querySelector(".modal__save-button"),this._submitButtonText=this._submitButton.textContent}setConfirmationCallback(e){this._handleConfirmationSubmit=e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleConfirmationSubmit(),this.close()}))}submitButtonState(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Deleting...";this._submitButton.textContent=e?t:this._submitButtonText}}("#card-confirmation-modal");w.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QWN2RCxXQUNoRCxDQUVBMkksdUJBQUFBLENBQXdCc0IsR0FDcEJoTSxLQUFLaU0sMEJBQTRCRCxDQUNyQyxDQUVBakgsaUJBQUFBLEdBQ0lJLE1BQU1KLG9CQUNOL0UsS0FBS29GLFdBQVdyRSxpQkFBaUIsVUFBV1EsSUFDeENBLEVBQUU0QyxpQkFDRm5FLEtBQUtpTSw0QkFDTGpNLEtBQUs0RSxPQUFPLEdBRXBCLENBRUFpQixpQkFBQUEsQ0FBa0JDLEdBQW9DLElBQTVCQyxFQUFVQyxVQUFBQyxPQUFBLFFBQUFDLElBQUFGLFVBQUEsR0FBQUEsVUFBQSxHQUFHLGNBRS9CaEcsS0FBS3NGLGNBQWN2RCxZQURuQitELEVBQ2lDQyxFQUVBL0YsS0FBS3VGLGlCQUU5QyxHSmtNMEQsNEJBRTlEa0YsRUFBNEIxRixtQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RyaXBsZXRlbi8uL3NyYy9jb21wb25lbnRzL0NhcmQuanMiLCJ3ZWJwYWNrOi8vdHJpcGxldGVuLy4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly90cmlwbGV0ZW4vLi9zcmMvY29tcG9uZW50cy9Qb3B1cC5qcyIsIndlYnBhY2s6Ly90cmlwbGV0ZW4vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL3RyaXBsZXRlbi8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vdHJpcGxldGVuLy4vc3JjL3BhZ2VzL2luZGV4LmpzIiwid2VicGFjazovL3RyaXBsZXRlbi8uL3NyYy9jb21wb25lbnRzL0FwaS5qcyIsIndlYnBhY2s6Ly90cmlwbGV0ZW4vLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qcyIsIndlYnBhY2s6Ly90cmlwbGV0ZW4vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly90cmlwbGV0ZW4vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhDb25maXJtYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FyZCB7XG4gICAgY29uc3RydWN0b3IoY2FyZERhdGEsIGNhcmRTZWxlY3RvciwgaGFuZGxlQ2FyZENsaWNrLCBoYW5kbGVMaWtlQ2xpY2ssIGhhbmRsZURlbGV0ZUNsaWNrKSB7XG4gICAgICAgIHRoaXMuX25hbWUgPSBjYXJkRGF0YS5uYW1lO1xuICAgICAgICB0aGlzLl9saW5rID0gY2FyZERhdGEubGluaztcbiAgICAgICAgdGhpcy5faWQgPSBjYXJkRGF0YS5faWQ7XG4gICAgICAgIHRoaXMuX2lzTGlrZWQgPSBjYXJkRGF0YS5pc0xpa2VkO1xuICAgICAgICB0aGlzLl9jYXJkU2VsZWN0b3IgPSBjYXJkU2VsZWN0b3I7XG4gICAgICAgIHRoaXMuX2hhbmRsZUNhcmRDbGljayA9IGhhbmRsZUNhcmRDbGljaztcbiAgICAgICAgdGhpcy5faGFuZGxlTGlrZUNsaWNrID0gaGFuZGxlTGlrZUNsaWNrO1xuICAgICAgICB0aGlzLl9oYW5kbGVEZWxldGVDbGljayA9IGhhbmRsZURlbGV0ZUNsaWNrO1xuICAgIH1cblxuICAgIF9zZXRFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2xpa2UtYnV0dG9uXCIpLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsICgpID0+IHRoaXMuX2hhbmRsZUxpa2VDbGljayh0aGlzKSk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19kZWxldGUtYnV0dG9uXCIpLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsICgpID0+IHRoaXMuX2hhbmRsZURlbGV0ZUNsaWNrKHRoaXMpKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2ltYWdlXCIpLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsICgpID0+IHRoaXMuX2hhbmRsZVByZXZpZXdQaWN0dXJlKCkpO1xuICAgIH1cblxuICAgIF9oYW5kbGVMaWtlQnV0dG9uKCkge1xuICAgICAgICAgaWYgKHRoaXMuX2lzTGlrZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19saWtlLWJ1dHRvblwiKS5jbGFzc0xpc3QuYWRkKFwiY2FyZF9fbGlrZS1idXR0b25fYWN0aXZlXCIpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbGlrZS1idXR0b25cIikuY2xhc3NMaXN0LnJlbW92ZShcImNhcmRfX2xpa2UtYnV0dG9uX2FjdGl2ZVwiKVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGlzTGlrZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0xpa2VkO1xuICAgIH1cblxuICAgIHNldENhcmRMaWtlKGlzTGlrZWQpIHtcbiAgICAgICAgdGhpcy5faXNMaWtlZCA9IGlzTGlrZWRcbiAgICAgICAgdGhpcy5faGFuZGxlTGlrZUJ1dHRvbigpO1xuICAgIH1cblxuICAgIGhhbmRsZURlbGV0ZUNhcmQoZSkge1xuICAgICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZSgpO1xuICAgIH1cblxuICAgIF9oYW5kbGVQcmV2aWV3UGljdHVyZSgpIHtcbiAgICAgICAgdGhpcy5faGFuZGxlQ2FyZENsaWNrKHRoaXMuX2xpbmssIHRoaXMuX25hbWUpO1xuICAgIH1cblxuICAgIGdldFZpZXcoKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NhcmRTZWxlY3RvcikuY29udGVudC5maXJzdEVsZW1lbnRDaGlsZC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2VcIikuc3JjID0gdGhpcy5fbGluaztcbiAgICAgICAgdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2ltYWdlXCIpLmFsdCA9IHRoaXMuX25hbWU7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX190aXRsZVwiKS50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XG5cbiAgICAgICAgdGhpcy5faGFuZGxlTGlrZUJ1dHRvbigpO1xuXG4gICAgICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XG4gICAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvcm1WYWxpZGF0b3Ige1xuXG4gICAgY29uc3RydWN0b3IoY29uZmlnLCBmb3JtRWwpIHtcbiAgICAgICAgdGhpcy5faW5wdXRTZWxlY3RvciA9IGNvbmZpZy5pbnB1dFNlbGVjdG9yO1xuICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3RvciA9IGNvbmZpZy5zdWJtaXRCdXR0b25TZWxlY3RvcjtcbiAgICAgICAgdGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyA9IGNvbmZpZy5pbmFjdGl2ZUJ1dHRvbkNsYXNzO1xuICAgICAgICB0aGlzLl9pbnB1dEVycm9yQ2xhc3MgPSBjb25maWcuaW5wdXRFcnJvckNsYXNzO1xuICAgICAgICB0aGlzLl9lcnJvckNsYXNzID0gY29uZmlnLmVycm9yQ2xhc3M7XG5cbiAgICAgICAgdGhpcy5fZm9ybUVsID0gZm9ybUVsO1xuXG59XG5cbl9zaG93SW5wdXRFcnJvcihpbnB1dEVsKSB7XG4gICAgY29uc3QgZXJyb3JNZXNzYWdlRWwgPSB0aGlzLl9mb3JtRWwucXVlcnlTZWxlY3RvcihgIyR7aW5wdXRFbC5pZH0tZXJyb3JgKTtcblxuICAgIGlucHV0RWwuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbnB1dEVycm9yQ2xhc3MpO1xuICAgIGVycm9yTWVzc2FnZUVsLnRleHRDb250ZW50ID0gaW5wdXRFbC52YWxpZGF0aW9uTWVzc2FnZTtcbiAgICBlcnJvck1lc3NhZ2VFbC5jbGFzc0xpc3QuYWRkKHRoaXMuX2Vycm9yQ2xhc3MpO1xufVxuXG5faGlkZUlucHV0RXJyb3IoaW5wdXRFbCkge1xuICAgIGNvbnN0IGVycm9yTWVzc2FnZUVsID0gdGhpcy5fZm9ybUVsLnF1ZXJ5U2VsZWN0b3IoYCMke2lucHV0RWwuaWR9LWVycm9yYCk7XG5cbiAgICBpbnB1dEVsLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5wdXRFcnJvckNsYXNzKTtcbiAgICBlcnJvck1lc3NhZ2VFbC50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgZXJyb3JNZXNzYWdlRWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9lcnJvckNsYXNzKTtcbn1cblxuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsKSB7XG4gICAgaWYgKCFpbnB1dEVsLnZhbGlkaXR5LnZhbGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaG93SW5wdXRFcnJvcihpbnB1dEVsKTtcbiAgICB9XG5cbiAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsKTtcbn1cblxuX2hhc0ludmFsaWRJbnB1dChpbnB1dExpc3QpIHtcbiAgICByZXR1cm4gIWlucHV0TGlzdC5ldmVyeSgoaW5wdXRFbCkgPT4gaW5wdXRFbC52YWxpZGl0eS52YWxpZClcbn1cblxuZGlzYWJsZUJ0bigpIHtcbiAgICBjb25zdCBzYXZlQnV0dG9uID0gdGhpcy5fZm9ybUVsLnF1ZXJ5U2VsZWN0b3IodGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IpO1xuXG4gICAgc2F2ZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xuICAgIHNhdmVCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xufVxuXG5fZW5hYmxlQnRuKCkge1xuICAgIGNvbnN0IHNhdmVCdXR0b24gPSB0aGlzLl9mb3JtRWwucXVlcnlTZWxlY3Rvcih0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3Rvcik7XG5cbiAgICBzYXZlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XG4gICAgc2F2ZUJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xufVxuXG5fdG9nZ2xlQnV0dG9uU3RhdGUoaW5wdXRFbHMpIHtcbiAgICBpZiAodGhpcy5faGFzSW52YWxpZElucHV0KGlucHV0RWxzKSkge1xuICAgICAgICB0aGlzLmRpc2FibGVCdG4oKVxuICAgICAgICByZXR1cm47XG4gICAgfSBcbiAgICB0aGlzLl9lbmFibGVCdG4oKTtcbn1cblxuX3NldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIGNvbnN0IGlucHV0RWxzID0gWy4uLnRoaXMuX2Zvcm1FbC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX2lucHV0U2VsZWN0b3IpXTtcblxuICAgIGlucHV0RWxzLmZvckVhY2goKGlucHV0RWwpID0+IHtcbiAgICAgICAgaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsKVxuICAgICAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoaW5wdXRFbHMpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuZW5hYmxlVmFsaWRhdGlvbigpIHtcbiAgICB0aGlzLl9mb3JtRWwuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLChlKSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9KTtcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xufVxuXG5yZXNldEVycm9yTWVzc2FnZSgpIHtcbiAgICBjb25zdCBpbnB1dEVscyA9IFsuLi50aGlzLl9mb3JtRWwucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9pbnB1dFNlbGVjdG9yKV07XG5cbiAgICBpbnB1dEVscy5mb3JFYWNoKChpbnB1dEVsKSA9PiB7XG4gICAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWwpO1xuICAgICAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZShpbnB1dEVscyk7XG4gICAgfSk7XG59XG5cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwIHtcbiAgICBjb25zdHJ1Y3Rvcih7cG9wdXBTZWxlY3Rvcn0pIHtcbiAgICAgICAgdGhpcy5fcG9wdXBFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cFNlbGVjdG9yKTtcbiAgICAgICAgdGhpcy5faGFuZGxlRXNjQ2xvc2UgPSB0aGlzLl9oYW5kbGVFc2NDbG9zZS5iaW5kKHRoaXMpO1xuICAgIH1cblxuICAgIG9wZW4oKSB7XG4gICAgICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwibW9kYWxfb3BlbmVkXCIpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xuICAgIH1cblxuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLl9wb3B1cEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcIm1vZGFsX29wZW5lZFwiKTtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcbiAgICB9XG5cbiAgICBfaGFuZGxlRXNjQ2xvc2UoZSkge1xuICAgICAgICBpZiAoZS5rZXkgPT09IFwiRXNjYXBlXCIpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICB9O1xuICAgIH1cblxuICAgIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgICB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fY2xvc2UtYnV0dG9uXCIpLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fcG9wdXBFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIChlKSA9PiB7XG4gICAgICAgICAgICBpZiAoZS50YXJnZXQgPT09IHRoaXMuX3BvcHVwRWxlbWVudCkge1xuICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgfVxufSIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XG4gICAgY29uc3RydWN0b3IocG9wdXBTZWxlY3RvciwgaGFuZGxlRm9ybVN1Ym1pdCkge1xuICAgICAgICBzdXBlcih7cG9wdXBTZWxlY3Rvcn0pO1xuICAgICAgICB0aGlzLl9wb3B1cEZvcm0gPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fZm9ybVwiKTtcbiAgICAgICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCA9IGhhbmRsZUZvcm1TdWJtaXQ7XG4gICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19zYXZlLWJ1dHRvblwiKTtcbiAgICAgICAgdGhpcy5fc3VibWl0QnV0dG9uVGV4dCA9IHRoaXMuX3N1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudDtcbiAgICB9XG5cbiAgICBfZ2V0SW5wdXRWYWx1ZXMoKSB7XG4gICAgICAgIGNvbnN0IGlucHV0TGlzdCA9IHRoaXMuX3BvcHVwRm9ybS5xdWVyeVNlbGVjdG9yQWxsKCcuZm9ybV9faW5wdXQnKTtcbiAgICAgICAgY29uc3QgdmFsdWVzID0ge307XG4gICAgICAgIGlucHV0TGlzdC5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgICAgICAgIHZhbHVlc1tpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG5cbiAgICBzZXRFdmVudExpc3RlbmVycygpe1xuICAgICAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xuICAgICAgICB0aGlzLl9wb3B1cEZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZUZvcm1TdWJtaXQodGhpcy5fZ2V0SW5wdXRWYWx1ZXMoKSk7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLl9wb3B1cEZvcm0ucmVzZXQoKTtcbiAgICAgICAgc3VwZXIuY2xvc2UoKTtcbiAgICB9XG5cbiAgICBzdWJtaXRCdXR0b25TdGF0ZShzdWJtaXQsIGJ1dHRvblRleHQgPSBcIlNhdmluZy4uLlwiKSB7XG4gICAgICAgIGlmIChzdWJtaXQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IGJ1dHRvblRleHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b24udGV4dENvbnRlbnQgPSB0aGlzLl9zdWJtaXRCdXR0b25UZXh0O1xuICAgICAgICB9XG4gICAgfSBcbn0gIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdGlvbiB7XG4gICAgY29uc3RydWN0b3Ioe2l0ZW1zLCByZW5kZXJlcn0sIGNvbnRhaW5lclNlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMuX2l0ZW1zID0gaXRlbXM7XG4gICAgICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyU2VsZWN0b3IpO1xuICAgIH1cblxuICAgIHJlbmRlckl0ZW1zKCkge1xuICAgICAgICB0aGlzLl9pdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIoaXRlbSk7XG4gICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYWRkSXRlbShpdGVtKSB7XG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5wcmVwZW5kKGl0ZW0pO1xuICAgIH1cbn0iLCJpbXBvcnQgQXBpIGZyb20gXCIuLi9jb21wb25lbnRzL0FwaS5qc1wiO1xuaW1wb3J0IENhcmQgZnJvbSBcIi4uL2NvbXBvbmVudHMvQ2FyZC5qc1wiO1xuaW1wb3J0IEZvcm1WYWxpZGF0b3IgZnJvbSBcIi4uL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qc1wiO1xuaW1wb3J0IFBvcHVwV2l0aENvbmZpcm1hdGlvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhDb25maXJtYXRpb24uanNcIjtcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanNcIjtcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qc1wiO1xuaW1wb3J0IFNlY3Rpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvU2VjdGlvbi5qc1wiO1xuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XG5pbXBvcnQgXCIuL2luZGV4LmNzc1wiO1xuXG4vKiBFbGVtZW50cyAqL1xuXG4vLyBQcm9maWxlIEVsZW1lbnRzXG5cbmNvbnN0IHByb2ZpbGVQZW5jaWxCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtcGVuY2lsLWJ0blwiKTtcbmNvbnN0IHByb2ZpbGVQZW5jaWxNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZmlsZS1wZW5jaWwtbW9kYWxcIik7XG5jb25zdCBwcm9maWxlQXZhdGFyTW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtYXZhdGFyLW1vZGFsXCIpO1xuY29uc3QgcHJvZmlsZVRpdGxlSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtdGl0bGUtaW5wdXRcIik7XG5jb25zdCBwcm9maWxlRGVzY3JpcHRpb25JbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZmlsZS1kZXNjcmlwdGlvbi1pbnB1dFwiKTtcbmNvbnN0IHByb2ZpbGVBdmF0YXJJbWFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9faW1hZ2VcIilcbmNvbnN0IHByb2ZpbGVBdmF0YXJFZGl0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9maWxlLWltYWdlLXBlbmNpbC1idG5cIik7XG5cbi8vIEFkZCBDYXJkIEVsZW1lbnRzXG5cbmNvbnN0IHByb2ZpbGVBZGRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtYWRkLWJ0blwiKTtcbmNvbnN0IGFkZENhcmRNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYWRkLWNhcmQtbW9kYWxcIik7XG5cbi8vIEFwaSBDbGFzc1xuXG5jb25zdCBhcGkgPSBuZXcgQXBpKHtcbiAgYmFzZVVybDogXCJodHRwczovL2Fyb3VuZC1hcGkuZW4udHJpcGxldGVuLXNlcnZpY2VzLmNvbS92MVwiLFxuICBoZWFkZXJzOiB7XG4gICAgYXV0aG9yaXphdGlvbjogXCI1ZWQ5N2Q5NS01NThmLTQ5OWQtOWQ4MS00ZTA2YmJlODkzMmNcIixcbiAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICB9XG59KTsgXG5cbi8vIFVzZXJJbmZvIFxuXG5jb25zdCB1c2VySW5mbyA9IG5ldyBVc2VySW5mbyh7XG4gIHRpdGxlOiAnLnByb2ZpbGVfX3RpdGxlJyxcbiAgZGVzY3JpcHRpb246ICcucHJvZmlsZV9fZGVzY3JpcHRpb24nLFxuICBhdmF0YXI6ICcucHJvZmlsZV9faW1hZ2UnXG59KTtcblxuLy8gUG9wdXAgSW1hZ2UgUHJldmlld1xuXG5jb25zdCBpbWFnZVBvcHVwID0gbmV3IFBvcHVwV2l0aEltYWdlKFwiI3ByZXZpZXctaW1hZ2UtbW9kYWxcIik7XG5cbmltYWdlUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuLy8gQ2FyZCBGdW5jdGlvbnMgSGFuZGxlcnNcblxuZnVuY3Rpb24gaGFuZGxlQ2FyZENsaWNrKGxpbmssIG5hbWUpIHtcbiAgaW1hZ2VQb3B1cC5vcGVuKHtsaW5rLCBuYW1lfSk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUxpa2VDbGljayhjYXJkKSB7XG4gIGlmIChjYXJkLmlzTGlrZWQoKSkge1xuICAgIGFwaVxuICAgICAgLmRpc2xpa2VDYXJkKGNhcmQuX2lkKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBjYXJkLnNldENhcmRMaWtlKGZhbHNlKVxuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yOiAke2Vycn1gKVxuICAgICAgfSlcbiAgfSBlbHNlIHtcbiAgICBhcGlcbiAgICAgIC5saWtlQ2FyZChjYXJkLl9pZClcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgY2FyZC5zZXRDYXJkTGlrZSh0cnVlKVxuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yOiAke2Vycn1gKVxuICAgICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVEZWxldGVDbGljayhjYXJkKSB7XG4gIGRlbGV0ZUNvbmZpcm1hdGlvbkNhcmRQb3B1cC5vcGVuKCk7XG4gIGRlbGV0ZUNvbmZpcm1hdGlvbkNhcmRQb3B1cC5zZXRDb25maXJtYXRpb25DYWxsYmFjaygoKSA9PiB7XG4gICAgYXBpXG4gICAgICAuZGVsZXRlQ2FyZChjYXJkLl9pZClcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgY2FyZC5oYW5kbGVEZWxldGVDYXJkKCk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3I6ICR7ZXJyfWApXG4gICAgICB9KVxuICB9KVxufVxuXG5cbi8vIENyZWF0ZSBDYXJkIEZ1bmN0aW9uXG5cbmZ1bmN0aW9uIGNyZWF0ZUNhcmQoY2FyZERhdGEpIHtcbiAgY29uc3QgY2FyZEVsZW1lbnREYXRhID0gbmV3IENhcmQoY2FyZERhdGEsIFwiI2NhcmQtdGVtcGxhdGVcIiwgaGFuZGxlQ2FyZENsaWNrLCBoYW5kbGVMaWtlQ2xpY2ssIGhhbmRsZURlbGV0ZUNsaWNrKTtcbiAgcmV0dXJuIGNhcmRFbGVtZW50RGF0YS5nZXRWaWV3KCk7XG59XG5cbi8vIEFkZCBDYXJkIE1vZGFsIEV2ZW50IEhhbmRsZXJcblxuZnVuY3Rpb24gaGFuZGxlQWRkTmV3Q2FyZFN1Ym1pdChuZXdDYXJkRGF0YSkge1xuICBjb25zdCBjYXJkRWxlbWVudCA9IGNyZWF0ZUNhcmQobmV3Q2FyZERhdGEpO1xuICBjYXJkU2VjdGlvbi5hZGRJdGVtKGNhcmRFbGVtZW50KTtcbn1cblxuLy8gVmFsaWRhdGlvbiBBY3RpdmF0aW9uXG5cbmNvbnN0IGRlZmF1dGxGb3JtQ29uZmlnID0ge1xuICBmb3JtU2VsZWN0b3I6IFwiLmZvcm1cIixcbiAgaW5wdXRTZWxlY3RvcjogXCIuZm9ybV9faW5wdXRcIixcbiAgc3VibWl0QnV0dG9uU2VsZWN0b3I6IFwiLm1vZGFsX19zYXZlLWJ1dHRvblwiLFxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcIm1vZGFsX19zYXZlLWJ1dHRvbl9kaXNhYmxlZFwiLFxuICBpbnB1dEVycm9yQ2xhc3M6IFwiZm9ybV9faW5wdXQtZXJyb3JcIixcbiAgZXJyb3JDbGFzczogXCJmb3JtX19lcnJvcl92aXNpYmxlXCJcbn1cblxuY29uc3QgZWRpdEZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihkZWZhdXRsRm9ybUNvbmZpZywgcHJvZmlsZVBlbmNpbE1vZGFsKTtcbmNvbnN0IGFkZENhcmRGb3JtVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IoZGVmYXV0bEZvcm1Db25maWcsIGFkZENhcmRNb2RhbCk7XG5jb25zdCBlZGl0QXZhdGFyRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKGRlZmF1dGxGb3JtQ29uZmlnLCBwcm9maWxlQXZhdGFyTW9kYWwpO1xuXG5lZGl0Rm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XG5hZGRDYXJkRm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XG5lZGl0QXZhdGFyRm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XG5cbi8vIFJlbmRlciBJbml0aWFsIENhcmRzIGZyb20gU2VjdGlvbiBjbGFzc1xuXG5sZXQgY2FyZFNlY3Rpb25cblxuUHJvbWlzZS5hbGwoW2FwaS5nZXRDdXJyZW50VXNlcigpLCBhcGkuZ2V0SW5pdGlhbENhcmRzKCldKVxuICAudGhlbigoW2RhdGEsIEluaXRpYWxDYXJkc10pID0+IHtcbiAgICB1c2VySW5mby5zZXRVc2VySW5mbyh7IHRpdGxlOiBkYXRhLm5hbWUsIGRlc2NyaXB0aW9uOiBkYXRhLmFib3V0fSk7XG4gICAgdXNlckluZm8uc2V0QXZhdGFyKHthdmF0YXI6IGRhdGEuYXZhdGFyfSk7XG4gICAgY2FyZFNlY3Rpb24gPSBuZXcgU2VjdGlvbih7XG4gICAgICBpdGVtczogSW5pdGlhbENhcmRzLnJldmVyc2UoKSxcbiAgICAgIHJlbmRlcmVyOiAoY2FyZERhdGEpID0+IHtcbiAgICAgICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gY3JlYXRlQ2FyZChjYXJkRGF0YSk7XG4gICAgICAgIGNhcmRTZWN0aW9uLmFkZEl0ZW0oY2FyZEVsZW1lbnQpO1xuICAgICAgfVxuICAgIH0sICcuY2FyZHNfX2NvbnRlbnQnKTtcbiAgICBjYXJkU2VjdGlvbi5yZW5kZXJJdGVtcygpO1xuICB9KVxuICAuY2F0Y2goKGVycikgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yOiAke2Vycn1gKVxuICB9KTtcblxuXG4vLyBFZGl0IFByb2ZpbGUgRm9ybSBcblxuY29uc3QgcHJvZmlsZUVkaXRQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKCcjcHJvZmlsZS1wZW5jaWwtbW9kYWwnLCAoZm9ybURhdGEpID0+IHtcbiAgcHJvZmlsZUVkaXRQb3B1cC5zdWJtaXRCdXR0b25TdGF0ZSh0cnVlKVxuICBhcGlcbiAgICAudXBkYXRlUHJvZmlsZShmb3JtRGF0YSlcbiAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgdXNlckluZm8uc2V0VXNlckluZm8oeyB0aXRsZTogZGF0YS5uYW1lLCBkZXNjcmlwdGlvbjogZGF0YS5hYm91dH0pO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yOiAke2Vycn1gKVxuICAgIH0pXG4gICAgLmZpbmFsbHkoKCkgPT4gcHJvZmlsZUVkaXRQb3B1cC5zdWJtaXRCdXR0b25TdGF0ZShmYWxzZSkpO1xufSk7XG5cbnByb2ZpbGVFZGl0UG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxucHJvZmlsZVBlbmNpbEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgY29uc3QgcHJvZmlsZUluZm8gPSB1c2VySW5mby5nZXRVc2VySW5mbygpO1xuICBwcm9maWxlVGl0bGVJbnB1dC52YWx1ZSA9ICBwcm9maWxlSW5mby50aXRsZTtcbiAgcHJvZmlsZURlc2NyaXB0aW9uSW5wdXQudmFsdWUgPSBwcm9maWxlSW5mby5kZXNjcmlwdGlvbjtcbiAgZWRpdEZvcm1WYWxpZGF0b3IucmVzZXRFcnJvck1lc3NhZ2UoKTtcbiAgZWRpdEZvcm1WYWxpZGF0b3IuZGlzYWJsZUJ0bigpO1xuICBwcm9maWxlRWRpdFBvcHVwLm9wZW4oKTtcbn0pO1xuXG4vLyBFZGl0IEF2YXRhciBGb3JtXG5cbmNvbnN0IHByb2ZpbGVBdmF0YXJQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKCcjcHJvZmlsZS1hdmF0YXItbW9kYWwnLCAobmV3QXZhdGFyKSA9PiB7XG4gIHByb2ZpbGVBdmF0YXJQb3B1cC5zdWJtaXRCdXR0b25TdGF0ZSh0cnVlKTtcbiAgYXBpXG4gICAgLnVwZGF0ZUF2YXRhcihuZXdBdmF0YXIpXG4gICAgLnRoZW4oKG5ld0F2YXRhcikgPT4ge1xuICAgICAgdXNlckluZm8uc2V0QXZhdGFyKHthdmF0YXI6IG5ld0F2YXRhci5hdmF0YXJ9KTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKGBFcnJvcjogJHtlcnJ9YClcbiAgICB9KVxuICAgIC5maW5hbGx5KCgpID0+IHByb2ZpbGVBdmF0YXJQb3B1cC5zdWJtaXRCdXR0b25TdGF0ZShmYWxzZSkpO1xufSk7XG5cbnByb2ZpbGVBdmF0YXJQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xuXG5wcm9maWxlQXZhdGFyRWRpdEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgZWRpdEF2YXRhckZvcm1WYWxpZGF0b3IucmVzZXRFcnJvck1lc3NhZ2UoKTtcbiAgZWRpdEF2YXRhckZvcm1WYWxpZGF0b3IuZGlzYWJsZUJ0bigpO1xuICBwcm9maWxlQXZhdGFyUG9wdXAub3BlbigpO1xufSlcblxuLy8gQWRkIE5ldyBDYXJkIEZvcm0gXG5cbmNvbnN0IGFkZE5ld0NhcmRQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKCcjYWRkLWNhcmQtbW9kYWwnLCAobmV3Q2FyZERhdGEpID0+IHtcbiAgYWRkTmV3Q2FyZFBvcHVwLnN1Ym1pdEJ1dHRvblN0YXRlKHRydWUpO1xuICBhcGlcbiAgICAuYWRkQ2FyZChuZXdDYXJkRGF0YSlcbiAgICAudGhlbigoY2FyZERhdGEpID0+IHtcbiAgICAgIGhhbmRsZUFkZE5ld0NhcmRTdWJtaXQoY2FyZERhdGEpO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yOiAke2Vycn1gKVxuICAgIH0pXG4gICAgLmZpbmFsbHkoKCkgPT4gYWRkTmV3Q2FyZFBvcHVwLnN1Ym1pdEJ1dHRvblN0YXRlKGZhbHNlKSk7XG59KTtcblxuYWRkTmV3Q2FyZFBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbnByb2ZpbGVBZGRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gIGFkZENhcmRGb3JtVmFsaWRhdG9yLnJlc2V0RXJyb3JNZXNzYWdlKCk7XG4gIGFkZENhcmRGb3JtVmFsaWRhdG9yLmRpc2FibGVCdG4oKTtcbiAgYWRkTmV3Q2FyZFBvcHVwLm9wZW4oKTtcbn0pO1xuXG4vLyBEZWxldGUgQ29uZmlybWF0aW9uIENhcmQgRm9ybSBcblxuY29uc3QgZGVsZXRlQ29uZmlybWF0aW9uQ2FyZFBvcHVwID0gbmV3IFBvcHVwV2l0aENvbmZpcm1hdGlvbignI2NhcmQtY29uZmlybWF0aW9uLW1vZGFsJyk7XG5cbmRlbGV0ZUNvbmZpcm1hdGlvbkNhcmRQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xuXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBBcGkge1xuICAgIGNvbnN0cnVjdG9yKHtiYXNlVXJsLCBoZWFkZXJzfSkge1xuICAgICAgICB0aGlzLl9iYXNlVXJsID0gYmFzZVVybDtcbiAgICAgICAgdGhpcy5faGVhZGVycyA9IGhlYWRlcnM7XG4gICB9XG5cbiAgIC8vIENoZWNrIFJlc3BvbnNlXG5cbiAgIF9jaGVja1NlcnZlclJlc3BvbnNlKHJlcykge1xuICAgIGlmIChyZXMub2spIHtcbiAgICAgIHJldHVybiByZXMuanNvbigpO1xuICAgIH0gZWxzZSBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzLnN0YXR1c31gKTtcbiAgIH0gXG4gIFxuICAgIC8vIFVzZXIgTWV0aG9kc1xuXG4gICAgZ2V0Q3VycmVudFVzZXIoKSB7XG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZWAsIHtcbiAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgICAgICB9KVxuICAgICAgICAudGhlbiAodGhpcy5fY2hlY2tTZXJ2ZXJSZXNwb25zZSlcbiAgICAgIH1cbiAgICBcbiAgICAgIHVwZGF0ZVByb2ZpbGUocHJvZmlsZURhdGEpIHtcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lYCwge1xuICAgICAgICAgIG1ldGhvZDogJ1BBVENIJyxcbiAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIG5hbWU6IHByb2ZpbGVEYXRhLnRpdGxlLFxuICAgICAgICAgICAgYWJvdXQ6IHByb2ZpbGVEYXRhLmRlc2NyaXB0aW9uLFxuICAgICAgICAgIH0pLFxuICAgICAgICB9KVxuICAgICAgICAudGhlbiAodGhpcy5fY2hlY2tTZXJ2ZXJSZXNwb25zZSk7XG4gICAgICB9XG4gICAgXG4gICAgICB1cGRhdGVBdmF0YXIoYXZhdGFyRGF0YSkge1xuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWUvYXZhdGFyYCwge1xuICAgICAgICAgIG1ldGhvZDogJ1BBVENIJyxcbiAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHthdmF0YXI6IGF2YXRhckRhdGEubGlua30pLFxuICAgICAgICB9KVxuICAgICAgICAudGhlbiAodGhpcy5fY2hlY2tTZXJ2ZXJSZXNwb25zZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIENhcmQgTWV0aG9kc1xuXG4gICAgICBnZXRJbml0aWFsQ2FyZHMoKSB7XG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2AsIHtcbiAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgICAgICB9KVxuICAgICAgICAudGhlbiAodGhpcy5fY2hlY2tTZXJ2ZXJSZXNwb25zZSlcbiAgICAgIH1cblxuICAgICAgLy8gQ3JlYXRlIGFuZCBEZWxldGUgQ2FyZHNcblxuICAgICAgYWRkQ2FyZCh7dGl0bGUsIGxpbmt9KSB7XG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2AsIHtcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIG5hbWU6IHRpdGxlLFxuICAgICAgICAgICAgbGluazogbGluayxcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgICAudGhlbiAodGhpcy5fY2hlY2tTZXJ2ZXJSZXNwb25zZSk7XG4gICAgICB9XG5cbiAgICAgIGRlbGV0ZUNhcmQoY2FyZElkKSB7XG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2NhcmRJZH1gLCB7XG4gICAgICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgICAgICB9KVxuICAgICAgICAudGhlbiAodGhpcy5fY2hlY2tTZXJ2ZXJSZXNwb25zZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIExpa2UgQ2FyZHMgRnVuY3Rpb25hbGl0eVxuXG4gICAgICBsaWtlQ2FyZChjYXJkSWQpIHtcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzLyR7Y2FyZElkfS9saWtlc2AsIHtcbiAgICAgICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuICh0aGlzLl9jaGVja1NlcnZlclJlc3BvbnNlKTtcbiAgICAgIH1cblxuICAgICAgZGlzbGlrZUNhcmQoY2FyZElkKSB7XG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2NhcmRJZH0vbGlrZXNgLCB7XG4gICAgICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgICAgICB9KVxuICAgICAgICAudGhlbiAodGhpcy5fY2hlY2tTZXJ2ZXJSZXNwb25zZSk7XG4gICAgICB9XG4gIH1cbiAgXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VySW5mbyB7XG4gICAgY29uc3RydWN0b3Ioe3RpdGxlLCBkZXNjcmlwdGlvbiwgYXZhdGFyfSkge1xuICAgICAgICB0aGlzLl90aXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGl0bGUpO1xuICAgICAgICB0aGlzLl9kZXNjcmlwdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZGVzY3JpcHRpb24pO1xuICAgICAgICB0aGlzLl9hdmF0YXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGF2YXRhcik7XG4gICAgfVxuXG4gICAgZ2V0VXNlckluZm8oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0aXRsZTogdGhpcy5fdGl0bGUudGV4dENvbnRlbnQsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogdGhpcy5fZGVzY3JpcHRpb24udGV4dENvbnRlbnRcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBzZXRVc2VySW5mbyh7IHRpdGxlLCBkZXNjcmlwdGlvbiB9KSB7XG4gICAgICAgIHRoaXMuX3RpdGxlLnRleHRDb250ZW50ID0gdGl0bGU7XG4gICAgICAgIHRoaXMuX2Rlc2NyaXB0aW9uLnRleHRDb250ZW50ID0gZGVzY3JpcHRpb247XG4gICAgfVxuXG4gICAgc2V0QXZhdGFyKHthdmF0YXJ9KSB7XG4gICAgICAgIHRoaXMuX2F2YXRhci5zcmMgPSBhdmF0YXI7XG4gICAgICB9O1xufSIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xuICAgIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcbiAgICAgICAgc3VwZXIoe3BvcHVwU2VsZWN0b3J9KTtcbiAgICAgICAgdGhpcy5fY2FyZEltYWdlID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX3ByZXZpZXctaW1hZ2VcIik7XG4gICAgICAgIHRoaXMuX2NhcmRUaXRsZSA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19wcmV2aWV3LWltYWdlLXRpdGxlXCIpO1xuICAgIH1cblxuICAgIG9wZW4oe2xpbmssIG5hbWV9KSB7XG4gICAgICAgIHRoaXMuX2NhcmRJbWFnZS5zcmMgPSBsaW5rO1xuICAgICAgICB0aGlzLl9jYXJkSW1hZ2UuYWx0ID0gbmFtZTtcbiAgICAgICAgdGhpcy5fY2FyZFRpdGxlLnRleHRDb250ZW50ID0gbmFtZTtcbiAgICAgICAgc3VwZXIub3BlbigpO1xuICAgIH1cbn0iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhDb25maXJtYXRpb24gZXh0ZW5kcyBQb3B1cCB7XG4gICAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xuICAgICAgICBzdXBlcih7cG9wdXBTZWxlY3Rvcn0pO1xuICAgICAgICB0aGlzLl9wb3B1cEZvcm0gPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fZm9ybVwiKTtcbiAgICAgICAgdGhpcy5fc3VibWl0QnV0dG9uID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX3NhdmUtYnV0dG9uXCIpO1xuICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b25UZXh0ID0gdGhpcy5fc3VibWl0QnV0dG9uLnRleHRDb250ZW50O1xuICAgIH1cblxuICAgIHNldENvbmZpcm1hdGlvbkNhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX2hhbmRsZUNvbmZpcm1hdGlvblN1Ym1pdCA9IGNhbGxiYWNrO1xuICAgIH1cbiAgICBcbiAgICBzZXRFdmVudExpc3RlbmVycygpe1xuICAgICAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xuICAgICAgICB0aGlzLl9wb3B1cEZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZUNvbmZpcm1hdGlvblN1Ym1pdCgpO1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdWJtaXRCdXR0b25TdGF0ZShzdWJtaXQsIGJ1dHRvblRleHQgPSBcIkRlbGV0aW5nLi4uXCIpIHtcbiAgICAgICAgaWYgKHN1Ym1pdCkge1xuICAgICAgICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLnRleHRDb250ZW50ID0gYnV0dG9uVGV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IHRoaXMuX3N1Ym1pdEJ1dHRvblRleHQ7XG4gICAgICAgIH1cbiAgICB9IFxufSAiXSwibmFtZXMiOlsiQ2FyZCIsImNvbnN0cnVjdG9yIiwiY2FyZERhdGEiLCJjYXJkU2VsZWN0b3IiLCJoYW5kbGVDYXJkQ2xpY2siLCJoYW5kbGVMaWtlQ2xpY2siLCJoYW5kbGVEZWxldGVDbGljayIsInRoaXMiLCJfbmFtZSIsIm5hbWUiLCJfbGluayIsImxpbmsiLCJfaWQiLCJfaXNMaWtlZCIsImlzTGlrZWQiLCJfY2FyZFNlbGVjdG9yIiwiX2hhbmRsZUNhcmRDbGljayIsIl9oYW5kbGVMaWtlQ2xpY2siLCJfaGFuZGxlRGVsZXRlQ2xpY2siLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJfZWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwiX2hhbmRsZVByZXZpZXdQaWN0dXJlIiwiX2hhbmRsZUxpa2VCdXR0b24iLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJzZXRDYXJkTGlrZSIsImhhbmRsZURlbGV0ZUNhcmQiLCJlIiwiZ2V0VmlldyIsImRvY3VtZW50IiwiY29udGVudCIsImZpcnN0RWxlbWVudENoaWxkIiwiY2xvbmVOb2RlIiwic3JjIiwiYWx0IiwidGV4dENvbnRlbnQiLCJGb3JtVmFsaWRhdG9yIiwiY29uZmlnIiwiZm9ybUVsIiwiX2lucHV0U2VsZWN0b3IiLCJpbnB1dFNlbGVjdG9yIiwiX3N1Ym1pdEJ1dHRvblNlbGVjdG9yIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJfaW5hY3RpdmVCdXR0b25DbGFzcyIsImluYWN0aXZlQnV0dG9uQ2xhc3MiLCJfaW5wdXRFcnJvckNsYXNzIiwiaW5wdXRFcnJvckNsYXNzIiwiX2Vycm9yQ2xhc3MiLCJlcnJvckNsYXNzIiwiX2Zvcm1FbCIsIl9zaG93SW5wdXRFcnJvciIsImlucHV0RWwiLCJlcnJvck1lc3NhZ2VFbCIsImlkIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJfaGlkZUlucHV0RXJyb3IiLCJfY2hlY2tJbnB1dFZhbGlkaXR5IiwidmFsaWRpdHkiLCJ2YWxpZCIsIl9oYXNJbnZhbGlkSW5wdXQiLCJpbnB1dExpc3QiLCJldmVyeSIsImRpc2FibGVCdG4iLCJzYXZlQnV0dG9uIiwiZGlzYWJsZWQiLCJfZW5hYmxlQnRuIiwiX3RvZ2dsZUJ1dHRvblN0YXRlIiwiaW5wdXRFbHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImVuYWJsZVZhbGlkYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsInJlc2V0RXJyb3JNZXNzYWdlIiwiUG9wdXAiLCJfcmVmIiwicG9wdXBTZWxlY3RvciIsIl9wb3B1cEVsZW1lbnQiLCJfaGFuZGxlRXNjQ2xvc2UiLCJiaW5kIiwib3BlbiIsImNsb3NlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImtleSIsInNldEV2ZW50TGlzdGVuZXJzIiwidGFyZ2V0IiwiUG9wdXBXaXRoRm9ybSIsImhhbmRsZUZvcm1TdWJtaXQiLCJzdXBlciIsIl9wb3B1cEZvcm0iLCJfaGFuZGxlRm9ybVN1Ym1pdCIsIl9zdWJtaXRCdXR0b24iLCJfc3VibWl0QnV0dG9uVGV4dCIsIl9nZXRJbnB1dFZhbHVlcyIsInZhbHVlcyIsImlucHV0IiwidmFsdWUiLCJyZXNldCIsInN1Ym1pdEJ1dHRvblN0YXRlIiwic3VibWl0IiwiYnV0dG9uVGV4dCIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIlNlY3Rpb24iLCJjb250YWluZXJTZWxlY3RvciIsIml0ZW1zIiwicmVuZGVyZXIiLCJfaXRlbXMiLCJfcmVuZGVyZXIiLCJfY29udGFpbmVyIiwicmVuZGVySXRlbXMiLCJpdGVtIiwiYWRkSXRlbSIsInByZXBlbmQiLCJwcm9maWxlUGVuY2lsQnRuIiwicHJvZmlsZVBlbmNpbE1vZGFsIiwicHJvZmlsZUF2YXRhck1vZGFsIiwicHJvZmlsZVRpdGxlSW5wdXQiLCJwcm9maWxlRGVzY3JpcHRpb25JbnB1dCIsInByb2ZpbGVBdmF0YXJFZGl0QnRuIiwicHJvZmlsZUFkZEJ0biIsImFkZENhcmRNb2RhbCIsImFwaSIsImJhc2VVcmwiLCJoZWFkZXJzIiwiX2Jhc2VVcmwiLCJfaGVhZGVycyIsIl9jaGVja1NlcnZlclJlc3BvbnNlIiwicmVzIiwib2siLCJqc29uIiwiUHJvbWlzZSIsInJlamVjdCIsInN0YXR1cyIsImdldEN1cnJlbnRVc2VyIiwiZmV0Y2giLCJ0aGVuIiwidXBkYXRlUHJvZmlsZSIsInByb2ZpbGVEYXRhIiwibWV0aG9kIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0aXRsZSIsImFib3V0IiwiZGVzY3JpcHRpb24iLCJ1cGRhdGVBdmF0YXIiLCJhdmF0YXJEYXRhIiwiYXZhdGFyIiwiZ2V0SW5pdGlhbENhcmRzIiwiYWRkQ2FyZCIsIl9yZWYyIiwiZGVsZXRlQ2FyZCIsImNhcmRJZCIsImxpa2VDYXJkIiwiZGlzbGlrZUNhcmQiLCJhdXRob3JpemF0aW9uIiwidXNlckluZm8iLCJfdGl0bGUiLCJfZGVzY3JpcHRpb24iLCJfYXZhdGFyIiwiZ2V0VXNlckluZm8iLCJzZXRVc2VySW5mbyIsInNldEF2YXRhciIsIl9yZWYzIiwiaW1hZ2VQb3B1cCIsIl9jYXJkSW1hZ2UiLCJfY2FyZFRpdGxlIiwiY2FyZCIsImNhdGNoIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwiZGVsZXRlQ29uZmlybWF0aW9uQ2FyZFBvcHVwIiwic2V0Q29uZmlybWF0aW9uQ2FsbGJhY2siLCJjcmVhdGVDYXJkIiwiZGVmYXV0bEZvcm1Db25maWciLCJmb3JtU2VsZWN0b3IiLCJlZGl0Rm9ybVZhbGlkYXRvciIsImFkZENhcmRGb3JtVmFsaWRhdG9yIiwiZWRpdEF2YXRhckZvcm1WYWxpZGF0b3IiLCJjYXJkU2VjdGlvbiIsImFsbCIsImRhdGEiLCJJbml0aWFsQ2FyZHMiLCJyZXZlcnNlIiwiY2FyZEVsZW1lbnQiLCJwcm9maWxlRWRpdFBvcHVwIiwiZm9ybURhdGEiLCJmaW5hbGx5IiwicHJvZmlsZUluZm8iLCJwcm9maWxlQXZhdGFyUG9wdXAiLCJuZXdBdmF0YXIiLCJhZGROZXdDYXJkUG9wdXAiLCJuZXdDYXJkRGF0YSIsImhhbmRsZUFkZE5ld0NhcmRTdWJtaXQiLCJjYWxsYmFjayIsIl9oYW5kbGVDb25maXJtYXRpb25TdWJtaXQiXSwic291cmNlUm9vdCI6IiJ9